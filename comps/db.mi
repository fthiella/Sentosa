<%doc>
Operazioni sul database, chiamate dal form ajax: lettura records, spostamento, etc.
</%doc>
<%flags>
extends => undef
</%flags>
<%class>
  has '_id'; # id of the object
  has 'button';
</%class>
<%init>
  use feature qw( switch );
  use Poet qw($log);
  use JSON ();
  
  my ($obj) = Sentosa::Objects::get_object($._id, 'form', $m->session->{auth_id});
  if (!$obj) { $m->not_found(); }; # form not found
  my ($columns) = Sentosa::Objects::parse_object($obj);

  my $db = DBI->connect($obj->{db}, $obj->{username}, $obj->{password}) or die("connection to ".$obj->{db}." error.\n");
  $db->{sqlite_unicode} = 1;
  $db->{mysql_enable_utf8} = 1;

  my @pk_values = map { $.args->{$_->{col}} } grep { defined $_->{pk} } @{$columns};

  for (my $i=0; $i<scalar @{$columns}; $i++) {
    @{$columns}[$i]->{new} = $.args->{@{$columns}[$i]->{col}} if ($.args->{@{$columns}[$i]->{col}});
  }

  if ($.button eq 'save') {
    my $q = Sentosa::SQL::insertUpdateQuery({
      source => $obj->{source},
      columns => $columns,
      dbms => $db->{Driver}->{Name}
    });

    my $sth = $db->prepare($q->{'query'});
    my %j;

    if ($q->{'query_type'} eq 'INSERT') {
      %j = (
        '_status' => ($sth->execute(@{$q->{'query_data'}}))?'OK':'Error',
        'pk' => (0+@pk_values == 1)? map { $_->{col} } grep { defined $_->{pk} } @{$columns}:undef,
        'last_insert_id' => $db->last_insert_id(undef, undef, undef, undef)
      );
    } else {
      %j = (
        '_status' => ($sth->execute(@{$q->{'query_data'}}))?'OK':'Error'
      );
    }

    $m->send_json( \%j );
  } else {
    my $order;
    my $move;

    given ($.button) {
      when ('primo') { # first OR goto
        $order = 'ASC';
        if ($.args->{'goto_record'} ne '') { $move = { move => 'goto', pk => [$.args->{'goto_record'}] } }
      }
      when ('ultimo') {
        $order = 'DESC';
      }
      when ('indietro') {
        $order = 'DESC';
        if ((@pk_values)) { $move = { move => 'backwards', pk => [@pk_values] } }
      }
      when ('avanti') {
        $order = 'ASC';
        if ((@pk_values)) { $move = { move => 'forwards', pk => [@pk_values] } }
      }
    }

    my $h = DBI->connect($obj->{db}, $obj->{username}, $obj->{password}) or die("connection to ".$obj->{db}." error.\n");
    $h->{sqlite_unicode} = 1;
    $h->{mysql_enable_utf8} = 1;
    my $q = Sentosa::SQL::selectQuery({
      source => $obj->{source},
      columns => $columns,
      order => $order,
      goto => $move,
      start => undef,
      length => 1,
      dbms => $h->{Driver}->{Name}
    });

    my $j = $db->selectrow_hashref($q->{'query_limit'}, undef, @{$q->{'query_limit_data'}});

    if ($j) {
      $m->send_json( $j );
      #$m->clear_buffer;
      ## $m->print(JSON::XS::encode_json(\%j));
      #$m->print(JSON::XS->new->encode($j));
      #$m->res->content_type("application/json");
      #$m->abort();
    }
  }
</%init>