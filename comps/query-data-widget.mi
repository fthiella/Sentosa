<%flags>
extends => undef;
</%flags>
<%class>
  has 'obj';
  has 'columns';

  has 'iDisplayStart';
  has 'iDisplayLength';
  has 'iColumns';

  has 'sEcho';

  has 'searchArgs';
</%class>
<%init>
  use DBI;
  use Sentosa::SQL;
  use Clone 'clone';

  # TODO: I think I made some confusion between hash_ref/array_ref and hash/array ... same as this question:
  # http://stackoverflow.com/questions/7083453/copying-a-hashref-in-perl
  # using clone ... should I use it on the Base.mp component instead of here?
  # (the problem: whenever I add a filter to a column, i switch to other page, then i go back to the original page the filter is still there
  # - that's because $.columns is a hash reference, therefore the original $recordset variable is updated also...)
  my $local_columns = clone($.columns);


  # add sSearch_nn to the columns data structure

  foreach (grep {/^sSearch_\d+/} keys $.searchArgs) {
    if ($.searchArgs->{$_} ne "") {
      # add filter to the column
      /sSearch_(\d+)/;
      ${$local_columns}[ $1 ]{search} = $.searchArgs->{$_};
    }
  }

  # add iSortCol_ to the columns data structure
  # TODO: this might be in conflict with existing order columns, should datatables be shown accordingly to those order, then let the user decide to change that order?
  for my $n (0..($.searchArgs->{'iSortingCols'}-1)) {
    my $column_number = $.searchArgs->{"iSortCol_$n"};

    # default is ASC, don't trust user input and set it to either ASC or DESC
    my $column_sort_direction = 'ASC';
    if ($.searchArgs->{"sSortDir_$n"} =~ /asc/i) {
      $column_sort_direction = 'ASC';
    } elsif ($.searchArgs->{"sSortDir_$n"} =~ /desc/i) {
      $column_sort_direction = 'DESC';
    }

    ${$local_columns}[ $column_number ]{order} = $column_sort_direction;
  }

  my $h = DBI->connect($.obj->{db}, $.obj->{username}, $.obj->{password}) or die("connection to ".$.obj->{db}." error.\n");
  $h->{sqlite_unicode} = 1;
  $h->{mysql_enable_utf8} = 1;

  my $q = Sentosa::SQL::selectQuery({
    source => $.obj->{source},
    columns => $local_columns,
    order => 'ASC',
    goto => {},
    start => $.iDisplayStart,
    length => $.iDisplayLength,
    dbms => $h->{Driver}->{Name}
  });

#  #################################################################
  
  my $query          = $q->{'query'};
  my $query_filt     = $q->{'query_search'};
  my $query_limit    = $q->{'query_limit'};

  my $query_cnt_all  = "SELECT COUNT(*) AS nrows FROM ($query) q\n";
  my $query_cnt_filt = "SELECT COUNT(*) AS nrows FROM ($query_filt) q\n";

  #### get number of unfiltered rows ####

  # get number of total rows, and number of total filtered rows
  my ($iTotalRecords) = $h->selectrow_array($query_cnt_all, undef, @{$q->{'query_data'}});
  my ($iTotalDisplayRecords) = $h->selectrow_array($query_cnt_filt, undef, @{$q->{'query_search_data'}});

</%init>
<%perl>
  #### get rows ####
  my $rows = $h->selectall_arrayref($query_limit, undef, @{$q->{'query_limit_data'}});

  my %src = (
    sEcho => $.sEcho,
    iTotalRecords => $iTotalRecords,
    iTotalDisplayRecords => $iTotalDisplayRecords,
    aaData => $rows
  );

  # $m->send_json( \%src );
  #$m->clear_buffer;
  # $m->print(JSON::XS::encode_json(\%j));
  #$m->print(JSON::XS->new->encode(\%src));
  #$m->res->content_type("application/json");
  #$m->abort();

  $m->send_json( \%src );
</%perl>
